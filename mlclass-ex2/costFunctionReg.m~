function [J, grad] = costFunctionReg(theta, X, y, lambda)
%COSTFUNCTIONREG Compute cost and gradient for logistic regression with regularization
%   J = COSTFUNCTIONREG(theta, X, y, lambda) computes the cost of using
%   theta as the parameter for regularized logistic regression and the
%   gradient of the cost w.r.t. to the parameters. 

% Initialize some useful values
m = length(y); % number of training examples

% You need to return the following variables correctly 
J = 0;
grad = zeros(size(theta));

% ====================== YOUR CODE HERE ======================
% Instructions: Compute the cost of a particular choice of theta.
%               You should set J to the cost.
%               Compute the partial derivatives and set grad to the partial
%               derivatives of the cost w.r.t. each parameter in theta

thetaTX = X * theta';
hypoth = sigmoid(thetaTX);

%fprintf('Printing hypothesis followed by J \n');

regJ = (sum(theta(2:end).^2)) * (lambda/(2*m));

J = (1/m) * (-1 * y' * log(hypoth) -(1-y') * log(1-hypoth)) + regJ;

regGrad = lambda/m * theta;

grad =1/m * (X' * (hypoth - y));


grad(2:length(grad)) = grad(2:length(grad)) + regGrad(2:length(regGrad));
%fprintf('After Lambda updata:\n')


%fprintf('Printing Gradient \n');






% =============================================================

end
